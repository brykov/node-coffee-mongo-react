(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var templates,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

templates = {};

templates['App'] = require('./templates/app.jsx');

templates['TypeBox'] = require('./templates/type_box.jsx');

templates['FancyInput'] = require('./templates/fancy_input.jsx');

window.FancyInput = (function(superClass) {
  extend(FancyInput, superClass);

  function FancyInput() {
    this.render = bind(this.render, this);
    this.changeHandler = bind(this.changeHandler, this);
    this.componentWillMount = bind(this.componentWillMount, this);
    return FancyInput.__super__.constructor.apply(this, arguments);
  }

  FancyInput.prototype.componentWillMount = function() {
    return this.setState({
      data: this.props.provider.state.data
    });
  };

  FancyInput.prototype.changeHandler = function(e) {
    var data;
    data = this.state.data;
    data[this.props.name] = e.target.value;
    return this.setState({
      data: data
    });
  };

  FancyInput.prototype.render = function() {
    return templates['FancyInput'].bind(this)();
  };

  return FancyInput;

})(React.Component);

window.TypeBox = (function(superClass) {
  extend(TypeBox, superClass);

  function TypeBox() {
    this.render = bind(this.render, this);
    this.componentDidMount = bind(this.componentDidMount, this);
    this.componentWillMount = bind(this.componentWillMount, this);
    this.save = bind(this.save, this);
    this.cancelEditMode = bind(this.cancelEditMode, this);
    this.editMode = bind(this.editMode, this);
    return TypeBox.__super__.constructor.apply(this, arguments);
  }

  TypeBox.prototype.editMode = function() {
    return this.setState({
      editMode: true
    });
  };

  TypeBox.prototype.cancelEditMode = function() {
    if (this.state.data._new) {
      return this.props.app.delNodeType(this.state.data);
    }
    return this.setState({
      editMode: false,
      data: _.clone(this.data_copy)
    });
  };

  TypeBox.prototype.save = function() {
    this.props.app.save();
    this.data_copy = _.clone(this.state.data);
    return this.setState({
      editMode: false,
      _new: false
    });
  };

  TypeBox.prototype.componentWillMount = function() {
    return this.setState({
      editMode: !!this.props.data._new,
      data: this.props.data
    });
  };

  TypeBox.prototype.componentDidMount = function() {
    return this.data_copy = _.clone(this.props.data);
  };

  TypeBox.prototype.render = function() {
    return templates['TypeBox'].bind(this)();
  };

  return TypeBox;

})(React.Component);

window.App = (function(superClass) {
  extend(App, superClass);

  function App() {
    this.render = bind(this.render, this);
    this.save = bind(this.save, this);
    this.componentDidMount = bind(this.componentDidMount, this);
    this.loadNodeTypes = bind(this.loadNodeTypes, this);
    this.delNodeType = bind(this.delNodeType, this);
    this.newNodeType = bind(this.newNodeType, this);
    this.componentWillMount = bind(this.componentWillMount, this);
    return App.__super__.constructor.apply(this, arguments);
  }

  App.prototype.componentWillMount = function() {
    return this.setState({
      node_types: []
    });
  };

  App.prototype.newNodeType = function() {
    var list;
    list = this.state.node_types;
    list.push({
      _id: (new Date).valueOf(),
      _new: true,
      name: '',
      title: ''
    });
    this.setState({
      node_types: list
    });
  };

  App.prototype.delNodeType = function(el) {
    var list;
    list = this.state.node_types;
    list.splice(list.indexOf(el), 1);
    this.setState({
      node_types: list
    });
  };

  App.prototype.loadNodeTypes = function() {
    qwest.get('/node_types').then((function(_this) {
      return function(xhr, response) {
        _this.setState({
          node_types: response['node_types']
        });
      };
    })(this));
  };

  App.prototype.componentDidMount = function() {
    this.loadNodeTypes();
  };

  App.prototype.save = function() {
    qwest.post('/node_types', {
      node_types: this.state.node_types
    }, {
      dataType: 'json'
    }).then((function(_this) {
      return function(xhr, response) {
        if (response.success === 'OK') {
          _this.loadNodeTypes();
        }
      };
    })(this))["catch"](function(e, xhr, response) {});
  };

  App.prototype.render = function() {
    return templates['App'].bind(this)();
  };

  return App;

})(React.Component);

ReactDOM.render(React.createElement(App), document.getElementById('react-app'));


},{"./templates/app.jsx":2,"./templates/fancy_input.jsx":3,"./templates/type_box.jsx":4}],2:[function(require,module,exports){
module.exports = function () {
  var type_box_list = this.state.node_types.map(function(type) 
      {return React.createElement(TypeBox, {data: type, app: this, key: type._id});}.bind(this)
  );

  return (
    React.createElement("div", {className: "app"}, 
      React.createElement("button", {onClick: this.newNodeType}, "ADD"), 
      type_box_list
    )
  );
};

},{}],3:[function(require,module,exports){
module.exports = function () {
  return(
    React.createElement("input", {type: "text", defaultValue: this.state.data[this.props.name], onChange: this.changeHandler})
  );
};

},{}],4:[function(require,module,exports){
module.exports = function () {
  var _view =
    React.createElement("div", {className: "type-box"}, 
      this.state.data.name, 
      "/", 
      this.state.data.title, 
      React.createElement("button", {onClick: this.editMode}, "EDIT")
    );
  var _edit =
    React.createElement("div", {className: "type-box"}, 
      React.createElement(FancyInput, {provider: this, name: "name"}), 
      "/", 
      React.createElement(FancyInput, {provider: this, name: "title"}), 
      React.createElement("button", {onClick: this.save}, "SAVE"), 
      React.createElement("button", {onClick: this.cancelEditMode}, "CANCEL")
    );
  return this.state.editMode ? _edit : _view;
};

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
